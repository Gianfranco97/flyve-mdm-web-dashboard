{
	"variables": [],
	"info": {
		"name": "flyve-mdm-tests",
		"_postman_id": "fa26b487-a05e-6422-0bb9-52cb24e95dfa",
		"description": "API Documnentation",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "A.- Auth",
			"description": "",
			"item": [
				{
					"name": "Init session as user token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Session Token is valid\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "user_token {{user_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				}
			]
		},
		{
			"name": "B.- User",
			"description": "",
			"item": [
				{
					"name": "Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}User",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"name\": \"user1@teclib.com\",\r\n    \"password\": \"********\",\r\n    \"password2\": \"********\",\r\n    \"firstname\": \"Test\",\r\n    \"realname\": \"User\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user2_id\", jsonData[0].id);",
									"postman.setEnvironmentVariable(\"user3_id\", jsonData[1].id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[1].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}User",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"name\": \"user2@teclib.com\",\r\n      \"password\": \"********\",\r\n      \"password2\": \"********\"\r\n    },\r\n    {\r\n      \"name\": \"user3@teclib.com\",\r\n      \"password\": \"********\",\r\n      \"password2\": \"********\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Add multiple objects into GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}User",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				}
			]
		},
		{
			"name": "C.- Auth",
			"description": "",
			"item": [
				{
					"name": "Init session as basic auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Valid session_token\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "user1@teclib.com",
								"password": "********",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic dXNlcjFAdGVjbGliLmNvbToqKioqKioqKg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				}
			]
		},
		{
			"name": "D.- Invitation",
			"description": "",
			"item": [
				{
					"name": "Add invitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user1_invitation_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"_useremails\": \"user1@teclib.com\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user2_invitation_id\", jsonData[0].id);",
									"postman.setEnvironmentVariable(\"user3_invitation_id\", jsonData[1].id);",
									"postman.setEnvironmentVariable(\"user4_invitation_id\", jsonData[2].id);",
									"postman.setEnvironmentVariable(\"user5_invitation_id\", jsonData[3].id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[1].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[2].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[3].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"_useremails\": \"user2@teclib.com\"\r\n    },\r\n    {\r\n      \"_useremails\": \"user3@teclib.com\"\r\n    },\r\n    {\r\n      \"_useremails\": \"user4@teclib.com\"\r\n    },\r\n    {\r\n      \"_useremails\": \"user5@teclib.com\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Add multiple objects into GLPi."
					},
					"response": []
				},
				{
					"name": "Get an invitation 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user4_id\", jsonData.users_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains invitation_token\"] = responseBody.has(\"invitation_token\");",
									"tests[\"Body contains users_id\"] = responseBody.has(\"users_id\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains documents_id\"] = responseBody.has(\"documents_id\");",
									"tests[\"Body contains status\"] = responseBody.has(\"status\");",
									"tests[\"Body contains expiration_date\"] = responseBody.has(\"expiration_date\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid invitation_token\"] = Object.prototype.toString.call(jsonData.invitation_token) === \"[object String]\";",
									"tests[\"Valid users_id\"] = Number.isInteger(jsonData.users_id);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid documents_id\"] = Number.isInteger(jsonData.documents_id);",
									"tests[\"Valid status\"] = Object.prototype.toString.call(jsonData.status) === \"[object String]\";",
									"tests[\"Valid expiration_date\"] = Object.prototype.toString.call(jsonData.expiration_date) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";",
									"tests[\"Valid link 2 rel\"] = Object.prototype.toString.call(jsonData.links[1].rel) === \"[object String]\";",
									"tests[\"Valid link 2 href\"] = Object.prototype.toString.call(jsonData.links[1].href) === \"[object String]\";",
									"tests[\"Valid link 3 rel\"] = Object.prototype.toString.call(jsonData.links[2].rel) === \"[object String]\";",
									"tests[\"Valid link 3 href\"] = Object.prototype.toString.call(jsonData.links[2].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation/{{user4_invitation_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get an invitation 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invitation_token\", jsonData.invitation_token);",
									"postman.setEnvironmentVariable(\"user5_id\", jsonData.users_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains invitation_token\"] = responseBody.has(\"invitation_token\");",
									"tests[\"Body contains users_id\"] = responseBody.has(\"users_id\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains documents_id\"] = responseBody.has(\"documents_id\");",
									"tests[\"Body contains status\"] = responseBody.has(\"status\");",
									"tests[\"Body contains expiration_date\"] = responseBody.has(\"expiration_date\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid invitation_token\"] = Object.prototype.toString.call(jsonData.invitation_token) === \"[object String]\";",
									"tests[\"Valid users_id\"] = Number.isInteger(jsonData.users_id);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid documents_id\"] = Number.isInteger(jsonData.documents_id);",
									"tests[\"Valid status\"] = Object.prototype.toString.call(jsonData.status) === \"[object String]\";",
									"tests[\"Valid expiration_date\"] = Object.prototype.toString.call(jsonData.expiration_date) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";",
									"tests[\"Valid link 2 rel\"] = Object.prototype.toString.call(jsonData.links[1].rel) === \"[object String]\";",
									"tests[\"Valid link 2 href\"] = Object.prototype.toString.call(jsonData.links[1].href) === \"[object String]\";",
									"tests[\"Valid link 3 rel\"] = Object.prototype.toString.call(jsonData.links[2].rel) === \"[object String]\";",
									"tests[\"Valid link 3 href\"] = Object.prototype.toString.call(jsonData.links[2].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation/{{user5_invitation_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the invitations."
					},
					"response": []
				},
				{
					"name": "Resend invitation by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_invitation_id = postman.getEnvironmentVariable(\"user1_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user1_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation/{{user1_invitation_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"_notify\": \"\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Resend invitation by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user2_invitation_id = postman.getEnvironmentVariable(\"user2_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user2_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{user2_invitation_id}},\r\n    \"_notify\": \"\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Resend invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user3_invitation_id = postman.getEnvironmentVariable(\"user3_invitation_id\");",
									"var user4_invitation_id = postman.getEnvironmentVariable(\"user4_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"User 3 return true\"] = jsonData[0][user3_invitation_id];",
									"tests[\"User 4 return true\"] = jsonData[1][user4_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{user3_invitation_id}},\r\n      \"_notify\": \"\"\r\n    },\r\n    {\r\n      \"id\": {{user4_invitation_id}},\r\n      \"_notify\": \"\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete invitation by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_invitation_id = postman.getEnvironmentVariable(\"user1_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user1_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation/{{user1_invitation_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete invitation by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user2_invitation_id = postman.getEnvironmentVariable(\"user2_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user2_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{user2_invitation_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user3_invitation_id = postman.getEnvironmentVariable(\"user3_invitation_id\");",
									"var user4_invitation_id = postman.getEnvironmentVariable(\"user4_invitation_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"User 3 return true\"] = jsonData[0][user3_invitation_id];",
									"tests[\"User 4 return true\"] = jsonData[1][user4_invitation_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{user3_invitation_id}}\r\n    },\r\n    {\r\n      \"id\": {{user4_invitation_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Invitation",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Invitation?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Invitation/?forcedisplay[0]=2&forcedisplay[1]=3&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "E.- Auth",
			"description": "",
			"item": [
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"personal_token\", jsonData.personal_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains personal_token\"] = responseBody.has(\"personal_token\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid personal_token\"] = Object.prototype.toString.call(jsonData.personal_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/User/{{user5_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "Init session as personal token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Valid session_token\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "user_token {{personal_token}}",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				},
				{
					"name": "Get full session",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var guest_profiles_id = jsonData.session[environment['plugin_alias'] + '_guest_profiles_id'];",
									"postman.setEnvironmentVariable(\"guest_profiles_id\", guest_profiles_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains guest_profiles_id\"] = responseBody.has(\"guest_profiles_id\")",
									"tests[\"Valid guest_profiles_id\"] = Number.isInteger(guest_profiles_id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/getFullSession/",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the current php $_SESSION."
					},
					"response": []
				},
				{
					"name": "Change active profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/changeActiveProfile/",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"profiles_id\": {{guest_profiles_id}}\r\n}"
						},
						"description": "Change active profile to the profiles_id one."
					},
					"response": []
				}
			]
		},
		{
			"name": "F.- Agent",
			"description": "",
			"item": [
				{
					"name": "Add agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"agent1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"_email\": \"user5@teclib.com\",\r\n    \"_invitation_token\": \"{{invitation_token}}\",\r\n    \"version\": \"1.0.0\",\r\n    \"_serial\": \"AZERTY\",\r\n    \"csr\": \"-----BEGIN CERTIFICATE REQUEST----- MIICnjCCAYYCAQAwWTELMAkGA1UEBhMCRlIxEzARBgNVBAgMClNvbWUtU3RhdGUx DzANBgNVBAoMBlRFQ0xJQjEkMCIGA1UEAwwbc29tZWRldmljZS5kZXRoZWdlZWsu ZXUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr75Xny6Crl9D ywkqgu3mM1JtbzQFSMzWqvgRooZDXSP09KleaHH2UQFVa5l8GMdB4q8qoszM0/np RTrCUvyyf0LtfytiNeCsqbhcqrmqK+25ROkpOGf70IsUtW9vEnSMKF/HQ7bsiOkQ nj4J3Mv++TF+wbAujsOCr5aX9ayTaY/0g0aXd0dRAjPzW1aqSsa+MyhYkZGuMwj9 RciOYxtpYR23TaGB4BdAiYz0xcMdidz3pdJwtRgXidNC0Fyb2irzwPKSbjeZVkaE e4Sz2yB40W+B3Z+vJVjP6j28yASjTebIaBUkY2krErLqslJnKApqcG1SoUkMg9k1 aUCs3OSyowIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAJVy4fVZ3Rehkdm2SAdP drvlZbwj7sAyUwXDM+5wyE8kWAYYusgFoEJT9f3LX3niYQ037WNt+W9L+mEh7OdR b1cqzwoT/Q/C2UCfj2dwYNFJJwTR8XRkxbSDjS8y3Y0VmbT7emY4SVWwUFxyavVq +2lU82CHbTqGjcEp+ufGGVsEQvAHUSHl0g8eKtm9+5zW+dN/rf3jbj7OanOewE2S T+VtaLc0I0/TCrVrArsICd1IoAJ+76NZv1wTa14e6FRcu/oofHEhqjbqzAzatBHX axFfsnFlqWruoCTbQQNSGolQKHVltbAYreUPLQGXw9K8mymgtYqdf9PGGVRBwx9L puw= -----END CERTIFICATE REQUEST-----\",\r\n    \"firstname\": \"Test\",\r\n    \"lastname\": \"User\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add agent with invalid invitation token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Bad Request\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains ERROR_GLPI_ADD\"] = responseBody.has(\"ERROR_GLPI_ADD\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"_email\": \"user5@teclib.com\",\r\n    \"_invitation_token\": \"{{invitation_token}}\",\r\n    \"_serial\": \"AZERTY\",\r\n    \"csr\": \"-----BEGIN CERTIFICATE REQUEST----- MIICnjCCAYYCAQAwWTELMAkGA1UEBhMCRlIxEzARBgNVBAgMClNvbWUtU3RhdGUx DzANBgNVBAoMBlRFQ0xJQjEkMCIGA1UEAwwbc29tZWRldmljZS5kZXRoZWdlZWsu ZXUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr75Xny6Crl9D ywkqgu3mM1JtbzQFSMzWqvgRooZDXSP09KleaHH2UQFVa5l8GMdB4q8qoszM0/np RTrCUvyyf0LtfytiNeCsqbhcqrmqK+25ROkpOGf70IsUtW9vEnSMKF/HQ7bsiOkQ nj4J3Mv++TF+wbAujsOCr5aX9ayTaY/0g0aXd0dRAjPzW1aqSsa+MyhYkZGuMwj9 RciOYxtpYR23TaGB4BdAiYz0xcMdidz3pdJwtRgXidNC0Fyb2irzwPKSbjeZVkaE e4Sz2yB40W+B3Z+vJVjP6j28yASjTebIaBUkY2krErLqslJnKApqcG1SoUkMg9k1 aUCs3OSyowIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAJVy4fVZ3Rehkdm2SAdP drvlZbwj7sAyUwXDM+5wyE8kWAYYusgFoEJT9f3LX3niYQ037WNt+W9L+mEh7OdR b1cqzwoT/Q/C2UCfj2dwYNFJJwTR8XRkxbSDjS8y3Y0VmbT7emY4SVWwUFxyavVq +2lU82CHbTqGjcEp+ufGGVsEQvAHUSHl0g8eKtm9+5zW+dN/rf3jbj7OanOewE2S T+VtaLc0I0/TCrVrArsICd1IoAJ+76NZv1wTa14e6FRcu/oofHEhqjbqzAzatBHX axFfsnFlqWruoCTbQQNSGolQKHVltbAYreUPLQGXw9K8mymgtYqdf9PGGVRBwx9L puw= -----END CERTIFICATE REQUEST-----\",\r\n    \"firstname\": \"Test\",\r\n    \"lastname\": \"User\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Get an agent by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"computer1_id\", jsonData.computers_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains version\"] = responseBody.has(\"version\");",
									"tests[\"Body contains computers_id\"] = responseBody.has(\"computers_id\");",
									"tests[\"Body contains wipe\"] = responseBody.has(\"wipe\");",
									"tests[\"Body contains lock\"] = responseBody.has(\"lock\");",
									"tests[\"Body contains enroll_status\"] = responseBody.has(\"enroll_status\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains fleets_id\"] = responseBody.has(\"fleets_id\");",
									"tests[\"Body contains last_report\"] = responseBody.has(\"last_report\");",
									"tests[\"Body contains last_contact\"] = responseBody.has(\"last_contact\");",
									"tests[\"Body contains certificate\"] = responseBody.has(\"certificate\");",
									"tests[\"Body contains topic\"] = responseBody.has(\"topic\");",
									"tests[\"Body contains mqttpasswd\"] = responseBody.has(\"mqttpasswd\");",
									"tests[\"Body contains broker\"] = responseBody.has(\"broker\");",
									"tests[\"Body contains port\"] = responseBody.has(\"port\");",
									"tests[\"Body contains tls\"] = responseBody.has(\"tls\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid version\"] = Object.prototype.toString.call(jsonData.version) === \"[object String]\";",
									"tests[\"Valid computers_id\"] = Number.isInteger(jsonData.computers_id);",
									"tests[\"Valid wipe\"] = Number.isInteger(jsonData.wipe);",
									"tests[\"Valid lock\"] = Number.isInteger(jsonData.lock);",
									"tests[\"Valid enroll_status\"] = Object.prototype.toString.call(jsonData.enroll_status) === \"[object String]\";",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid _fleets_id\"] = Number.isInteger(jsonData[environment.plugin_alias + '_fleets_id']);",
									"tests[\"Valid last_report\"] = (jsonData.last_report === null);",
									"tests[\"Valid last_contact\"] = (jsonData.last_contact === null);",
									"tests[\"Valid certificate\"] = Object.prototype.toString.call(jsonData.certificate) === \"[object String]\";",
									"tests[\"Valid topic\"] = Object.prototype.toString.call(jsonData.topic) === \"[object String]\";",
									"tests[\"Valid mqttpasswd\"] = Object.prototype.toString.call(jsonData.mqttpasswd) === \"[object String]\";",
									"tests[\"Valid broker\"] = Object.prototype.toString.call(jsonData.broker) === \"[object String]\";",
									"tests[\"Valid port\"] = Number.isInteger(jsonData.port);",
									"tests[\"Valid tls\"] = Number.isInteger(jsonData.tls);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent/{{agent1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of Agent identified by id."
					},
					"response": []
				}
			]
		},
		{
			"name": "G.- FusionInventory",
			"description": "",
			"item": [
				{
					"name": "Send inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var xmlTree = xml2Json(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains REPLY\"] = responseBody.has(\"REPLY\");",
									"tests[\"Valid REPLY\"] = xmlTree.REPLY;"
								]
							}
						}
					],
					"request": {
						"url": "{{fusioninventory_url}}",
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "FusionInventory-Agent-Android_v1.0",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "text/plain; charset=ISO-8859-1",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<REQUEST>\n  <QUERY>INVENTORY</QUERY>\n  <DEVICEID>861946037669183-2016-10-06-13-26-18</DEVICEID>\n  <CONTENT>\n    <ACCESSLOG>\n      <LOGDATE>2016-30-08 05:11:48</LOGDATE>\n      <USERID>N/A</USERID>\n    </ACCESSLOG>\n    <HARDWARE>\n      <CHECKSUM>65535</CHECKSUM>\n      <DATELASTLOGGEDUSER>11/02/16</DATELASTLOGGEDUSER>\n      <LASTLOGGEDUSER>builder</LASTLOGGEDUSER>\n      <NAME>Redmi 3</NAME>\n      <OSNAME>Android 5.1.1</OSNAME>\n      <ARCHNAME>aarch64</ARCHNAME>\n      <SDK>22</SDK>\n      <UNIQUEID>a6fd2aa07173519a</UNIQUEID>\n      <MEMORY>2867</MEMORY>\n      <PROCESSORT>AArch64 Processor rev 4 (aarch64)</PROCESSORT>\n    </HARDWARE>\n    <BIOS>\n      <BDATE>11/02/16</BDATE>\n      <BMANUFACTURER>Xiaomi</BMANUFACTURER>\n      <MMANUFACTURER>Xiaomi</MMANUFACTURER>\n      <SMODEL>Redmi 3</SMODEL>\n      <SSN>AZERTY</SSN>\n    </BIOS>\n    <MEMORIES>\n      <DESCRIPTION>Memory</DESCRIPTION>\n      <CAPACITY>2867</CAPACITY>\n    </MEMORIES>\n    <INPUTS>\n      <TOUCHSCREEN>FINGER</TOUCHSCREEN>\n    </INPUTS>\n    <SENSORS>\n      <NAME>liteon-proximity</NAME>\n      <MANUFACTURER>liteon</MANUFACTURER>\n      <TYPE>PROXIMITY</TYPE>\n      <POWER>3.0</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>akm09911-mag</NAME>\n      <MANUFACTURER>Asahi Kasei Microdevices Corporation</MANUFACTURER>\n      <TYPE>MAGNETIC FIELD</TYPE>\n      <POWER>0.35</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>liteon-light</NAME>\n      <MANUFACTURER>liteon</MANUFACTURER>\n      <POWER>0.2</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>MPU6050-gyro</NAME>\n      <MANUFACTURER>Invensense</MANUFACTURER>\n      <TYPE>GYROSCOPE</TYPE>\n      <POWER>3.6</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>MPU6050-accel</NAME>\n      <MANUFACTURER>Invensense</MANUFACTURER>\n      <TYPE>ACCELEROMETER</TYPE>\n      <POWER>0.5</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>akm09911-orientation</NAME>\n      <MANUFACTURER>oem</MANUFACTURER>\n      <TYPE>ORIENTATION</TYPE>\n      <POWER>1.0</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>akm09911-mag</NAME>\n      <MANUFACTURER>Asahi Kasei Microdevices Corporation</MANUFACTURER>\n      <POWER>0.35</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>MPU6050-gyro</NAME>\n      <MANUFACTURER>Invensense</MANUFACTURER>\n      <POWER>3.6</POWER>\n      <VERSION>1</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>Rotation Vector Sensor</NAME>\n      <MANUFACTURER>AOSP</MANUFACTURER>\n      <TYPE>ROTATION VECTOR</TYPE>\n      <POWER>4.45</POWER>\n      <VERSION>3</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>Gravity Sensor</NAME>\n      <MANUFACTURER>AOSP</MANUFACTURER>\n      <TYPE>GRAVITY</TYPE>\n      <POWER>4.45</POWER>\n      <VERSION>3</VERSION>\n    </SENSORS>\n    <SENSORS>\n      <NAME>Linear Acceleration Sensor</NAME>\n      <MANUFACTURER>AOSP</MANUFACTURER>\n      <TYPE>LINEAR ACCELERATION</TYPE>\n      <POWER>4.45</POWER>\n      <VERSION>3</VERSION>\n    </SENSORS>\n    <DRIVES>\n      <VOLUMN>/system</VOLUMN>\n      <TOTAL>1968</TOTAL>\n      <FREE>203</FREE>\n    </DRIVES>\n    <DRIVES>\n      <VOLUMN>/storage/emulated/0</VOLUMN>\n      <TOTAL>25708</TOTAL>\n      <FREE>15838</FREE>\n    </DRIVES>\n    <DRIVES>\n      <VOLUMN>/data</VOLUMN>\n      <TOTAL>25758</TOTAL>\n      <FREE>15888</FREE>\n    </DRIVES>\n    <DRIVES>\n      <VOLUMN>/cache</VOLUMN>\n      <TOTAL>253</TOTAL>\n      <FREE>243</FREE>\n    </DRIVES>\n    <CPUS>\n      <NAME>AArch64 Processor rev 4 (aarch64)</NAME>\n    </CPUS>\n    <SIMCARDS>\n      <COUNTRY>es</COUNTRY>\n      <OPERATOR_CODE>21403</OPERATOR_CODE>\n      <OPERATOR_NAME>Orange</OPERATOR_NAME>\n      <SERIAL>8934012451541008176f</SERIAL>\n      <STATE>SIM_STATE_READY</STATE>\n      <SUBSCRIBER_ID>214032830388816</SUBSCRIBER_ID>\n    </SIMCARDS>\n    <VIDEOS>\n      <RESOLUTION>720x1280</RESOLUTION>\n    </VIDEOS>\n    <CAMERAS>\n      <RESOLUTIONS>4160x3120</RESOLUTIONS>\n    </CAMERAS>\n    <NETWORKS>\n      <TYPE>WIFI</TYPE>\n      <MACADDR>74:23:44:95:8c:f4</MACADDR>\n      <SPEED>-1</SPEED>\n      <SSID>null</SSID>\n      <IPGATEWAY>0.0.0.0</IPGATEWAY>\n      <IPADDRESS>0.0.0.0</IPADDRESS>\n      <IPMASK>0.0.0.0</IPMASK>\n      <IPDHCP>192.168.1.1</IPDHCP>\n    </NETWORKS>\n    <ENVS>\n      <KEY>ANDROID_ROOT</KEY>\n      <VAL>/system</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>EMULATED_STORAGE_SOURCE</KEY>\n      <VAL>/mnt/shell/emulated</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>LD_PRELOAD</KEY>\n      <VAL>libsigchain.so:libNimsWrap.so</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>LOOP_MOUNTPOINT</KEY>\n      <VAL>/mnt/obb</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>EMULATED_STORAGE_TARGET</KEY>\n      <VAL>/storage/emulated</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_BOOTLOGO</KEY>\n      <VAL>1</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>EXTERNAL_STORAGE</KEY>\n      <VAL>/storage/emulated/legacy</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>SYSTEMSERVERCLASSPATH</KEY>\n      <VAL>/system/framework/services.jar:/system/framework/ethernet-service.jar:/system/framework/wifi-service.jar</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_SOCKET_zygote</KEY>\n      <VAL>10</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_DATA</KEY>\n      <VAL>/data</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>PATH</KEY>\n      <VAL>/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_ASSETS</KEY>\n      <VAL>/system/app</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ASEC_MOUNTPOINT</KEY>\n      <VAL>/mnt/asec</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>BOOTCLASSPATH</KEY>\n      <VAL>/system/framework/core-libart.jar:/system/framework/conscrypt.jar:/system/framework/okhttp.jar:/system/framework/core-junit.jar:/system/framework/bouncycastle.jar:/system/framework/ext.jar:/system/framework/framework.jar:/system/framework/telephony-common.jar:/system/framework/voip-common.jar:/system/framework/ims-common.jar:/system/framework/mms-common.jar:/system/framework/android.policy.jar:/system/framework/apache-xml.jar:/system/framework/qcmediaplayer.jar:/system/framework/WfdCommon.jar:/system/framework/qcom.fmradio.jar:/system/framework/oem-services.jar:/system/framework/vcard.jar:/system/framework/tcmiface.jar:/system/app/miui/miui.apk:/system/app/miuisystem/miuisystem.apk</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_PROPERTY_WORKSPACE</KEY>\n      <VAL>8,0</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>SECONDARY_STORAGE</KEY>\n      <VAL>/storage/sdcard1</VAL>\n    </ENVS>\n    <ENVS>\n      <KEY>ANDROID_STORAGE</KEY>\n      <VAL>/storage</VAL>\n    </ENVS>\n    <JVMS>\n      <NAME>Dalvik</NAME>\n      <VENDOR>The Android Project</VENDOR>\n      <LANGUAGE>en_US</LANGUAGE>\n      <RUNTIME>0.9</RUNTIME>\n      <HOME>/system</HOME>\n      <VERSION>2.1.0</VERSION>\n      <CLASSPATH>.</CLASSPATH>\n    </JVMS>\n    <SOFTWARES>\n      <NAME>com.amazon.mShop.MShopApplication</NAME>\n      <VERSION>8.8.0.100</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.bcn.mobileid.MobileIdApplication</NAME>\n      <VERSION>2.5.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.youtube.app.YouTubeApplication</NAME>\n      <VERSION>11.41.56</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mcdonalds.android.McDonaldsApp</NAME>\n      <VERSION>5.0.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qrd.omadownload</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>jp.forkhub</NAME>\n      <VERSION>1.2.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>net.skyscanner.hotels.main.App</NAME>\n      <VERSION>2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.iboomobile.mrw</NAME>\n      <VERSION>1.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.telephony</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.powerkeeper.PowerKeeperApplication</NAME>\n      <VERSION>3.1.00</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.fmradio.FmApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.handbiometric</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.alibaba.app.AEApp</NAME>\n      <VERSION>5.0.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.telegram.messenger.ApplicationLoader</NAME>\n      <VERSION>3.13.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.media</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>android.support.multidex.MultiDexApplication</NAME>\n      <VERSION>1.02</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.milink.service</NAME>\n      <VERSION>1.0.9</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cz.acrobits.softphone.SoftphoneApplication</NAME>\n      <VERSION>1.1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.adif.elcanomovil.ElcanoApplication</NAME>\n      <VERSION>1.0.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.docs.editors.kix.configurations.kixwithquickword.KixWithQuickWordApplication</NAME>\n      <VERSION>1.6.412.11.44</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.sentidocomun.subway</NAME>\n      <VERSION>1.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qti.service.colorservice</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.activeandroid.app.Application</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.vodafone.mwallet.MainApplication</NAME>\n      <VERSION>4.4.20</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.account.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.shutdownlistner</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.wallpapercropper</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.teclib.storkmdm.MainApplication</NAME>\n      <VERSION>0.94.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.quicinc.cne.CNEService.CNEServiceApp</NAME>\n      <VERSION>5.1.1-eng.lnxbuild.20151210.120329</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.autoregistration</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mobilabsolutions.jenkins.android.JenkinsApp</NAME>\n      <VERSION>1.2.46</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>de.schildbach.wallet.WalletApplication</NAME>\n      <VERSION>5.03</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.caprabo.app.App</NAME>\n      <VERSION>2.3.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wt.secret_code_manager</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.milivetalk.MiuiApplication</NAME>\n      <VERSION>8.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.gameeapp.android.app.AppController</NAME>\n      <VERSION>1.7.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.updater.Application</NAME>\n      <VERSION>3.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>net.bigtweets.android.BigTweetsApp</NAME>\n      <VERSION>1.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.esencialfamiliar.es</NAME>\n      <VERSION>1.0.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.documentsui.DocumentsApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.galaxy4</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.oysho.views.OyshoApplication</NAME>\n      <VERSION>3.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.externalstorage</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.promoteapps.constitucionespanola.MyApplication</NAME>\n      <VERSION>4.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.timerswitch</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.gamecenter.sdk.MiGameSDKApplication</NAME>\n      <VERSION>4.7.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.htmlviewer.HtmlViewerApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.svi</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.securityadd.SecurityAddApplication</NAME>\n      <VERSION>V8_6.9.21</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.pushbullet.android.portal.PortalApplication</NAME>\n      <VERSION>1.2.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.imdb.mobile.IMDbApplication</NAME>\n      <VERSION>6.2.3.106230100</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.iflytek.speechcloud</NAME>\n      <VERSION>1.0.10053</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.gallery.GalleryApp</NAME>\n      <VERSION>2.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.quicksearchbox.QsbApplicationWrapper</NAME>\n      <VERSION>6.10.19</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.mms.service</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>zena.dominos</NAME>\n      <VERSION>2.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.netquest.pokey.ApplicationController</NAME>\n      <VERSION>1.8.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.lufthansa.android.lufthansa.LHApplication</NAME>\n      <VERSION>5.6.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.munrodev.crfmobile.application.CFBaseApplication</NAME>\n      <VERSION>2.7.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.downloads.DownloadApplication</NAME>\n      <VERSION>6.10.18.800001</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.freelancer.android.messenger.GafApp</NAME>\n      <VERSION>3.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.inwallet.application.InWalletApplication</NAME>\n      <VERSION>2.3.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.payment.PaymentApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.preva.app.PrevaApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>o.DW</NAME>\n      <VERSION>1.4.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.securitycenter.Application</NAME>\n      <VERSION>2.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.browser.provider</NAME>\n      <VERSION>4.4.4-1227136</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.engineertool</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.paypal.android.p2pmobile.common.app.PayPalApplication</NAME>\n      <VERSION>6.6.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qapp.secprotect</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.interfacepermissions</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.sdos.sdosproject.DiaApplication</NAME>\n      <VERSION>3.6.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.mmip.iyellra.YellApplication</NAME>\n      <VERSION>4.2.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.escena25</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.browser.Browser</NAME>\n      <VERSION>8.4.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.ad.server.AdLauncher</NAME>\n      <VERSION>2016.11.03</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.applications</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ryanair.cheapflights.AppController</NAME>\n      <VERSION>3.24</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.vef.testsConstitucion</NAME>\n      <VERSION>0.9.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.funshion.video.player</NAME>\n      <VERSION>0.3.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mmazzarolo.dev.topgithub.MainApplication</NAME>\n      <VERSION>1.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.soundrecorder.SoundRecorderApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.newspaperdirect.pressreader.android.ext.GApp</NAME>\n      <VERSION>4.12.0480</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.baidu.input_mi.ImeApplication</NAME>\n      <VERSION>6.5.4.65</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.massimodutti.MDApp</NAME>\n      <VERSION>1.21.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.defcontainer</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.guardprovider.GuardApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mapswithme.maps.MwmApplication</NAME>\n      <VERSION>6.3.6-Google</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.agpstestmode</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.flights.lastminute</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.downloads.ui.app.GlobalApplication</NAME>\n      <VERSION>6.10.18.800001</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.finsky.FinskyApp</NAME>\n      <VERSION>7.0.17.H-all [0]</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.pacprocessor</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.cabl</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.backup.BackupApp</NAME>\n      <VERSION>4.3.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.clubvips.app.ClubVipsApp</NAME>\n      <VERSION>1.2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.dotopen.apps4bcn</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>android.support.multidex.MultiDexApplication</NAME>\n      <VERSION>4.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.ecom.EcomApplication</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.jr.MiFinanceApp</NAME>\n      <VERSION>4.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.certinstaller</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.reddit.frontpage.FrontpageApplication</NAME>\n      <VERSION>1.12.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.codeaurora.bluetooth</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.carnetjove</NAME>\n      <VERSION>4.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.bitsmedia.android.muslimpro.MPApplication</NAME>\n      <VERSION>8.4.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.anuntis.fotocasa.InitApp</NAME>\n      <VERSION>5.52</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>android</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.alphonso.pulse.PulseApplication</NAME>\n      <VERSION>5.1.9</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.contacts.MiuiApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.wfd.service</NAME>\n      <VERSION>2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.admitone.commoncode.A1_App</NAME>\n      <VERSION>2.3.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.securitycore.SecurityCoreApplication</NAME>\n      <VERSION>5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wunderkinder.wlapi.WLAPIApplication</NAME>\n      <VERSION>3.4.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.TuExpertoOrange.es</NAME>\n      <VERSION>1.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.primarkcatalogo</NAME>\n      <VERSION>3.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.quran.labs.androidquran.QuranApplication</NAME>\n      <VERSION>2.7.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.orangecloud.es</NAME>\n      <VERSION>1.8.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.bcn.bcnbiblioteca.BCNBibliotecaApplication</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>net.cofb.android.farmaguia</NAME>\n      <VERSION>2.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.mms.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.stk.StkApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>oms.drmservice</NAME>\n      <VERSION>1.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.backupconfirm</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.activate.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mfashiongallery.emag.LockScreenApp</NAME>\n      <VERSION>M816102630-MA</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.gh4a.Gh4Application</NAME>\n      <VERSION>4.0.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>br.com.easytaxi.EasyApp</NAME>\n      <VERSION>10.2.5.48</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ted.android.ReferenceApplication</NAME>\n      <VERSION>3.0.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.amazon.drive.application.DriveApplication</NAME>\n      <VERSION>1.7.0.21.0-google_10017910</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.vivitylabs.android.braintrainer.FitBrainsApplication</NAME>\n      <VERSION>3.0.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.player.app.MusicApplication</NAME>\n      <VERSION>2.7.10</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.travel.es.utils.OrangeTravelApplication</NAME>\n      <VERSION>1.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.pinterest.base.Application</NAME>\n      <VERSION>6.3.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.provision.ProvisionApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.codeaurora.ims</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.geomobile.tmbmobile.JoTMBe</NAME>\n      <VERSION>4.1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.internal.app.SystemApplication</NAME>\n      <VERSION>1.8.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.anuntis.segundamano.SgmApplication</NAME>\n      <VERSION>6.32.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.wallpaper.holospiral</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ikea.kompis.KSAIkeaApplication</NAME>\n      <VERSION>1.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.calendar.application.CalendarApplication</NAME>\n      <VERSION>8.1.6.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.phasebeam</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.translation.kingsoft</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.vueling.utils.VuelingApplication</NAME>\n      <VERSION>6.4.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.compass.CompassApplication</NAME>\n      <VERSION>1.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.rom</NAME>\n      <VERSION>1.5.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.midrive.Application</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qcrilmsgtunnel</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wirecard.mobilewallet.Core</NAME>\n      <VERSION>1.5.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.settings</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qcom_qmi</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.sharedstoragebackup</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mediatek.batterywarning</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>md585e8e3337e232a53c552de664730fefb.MyApplication</NAME>\n      <VERSION>1.02</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.printspooler</NAME>\n      <VERSION>1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.personalassistant.Application</NAME>\n      <VERSION>1.4.209</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.miuibbs.BbsApplication</NAME>\n      <VERSION>2.7.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.qmags.com.library.QmagsApplication</NAME>\n      <VERSION>2.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.dreams.basic</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>android.support.multidex.MultiDexApplication</NAME>\n      <VERSION>1.24</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.incallui.InCallApp$InCallApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.mitv.phone.remotecontroller.XMRCApplication</NAME>\n      <VERSION>5.2.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.travel.onthego.application.OnTheGoApplication</NAME>\n      <VERSION>0.0.41.136052195</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.appyet.context.ApplicationContext</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.microsoft.office.officehub.OHubApplication</NAME>\n      <VERSION>15.0.5430.2000</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.scribd.app.ScribdApp</NAME>\n      <VERSION>6.11.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.bugreport.BugreportApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mo2o.carrefour.alimentacion.application.CarrefourApplication</NAME>\n      <VERSION>3.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.inputdevices</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.bayteq.consumconecta.ConfigApp</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.milivebox.es.LiveboxApplication</NAME>\n      <VERSION>4.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.home.GencatMobiApplication</NAME>\n      <VERSION>3.0.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.viafirma.correos060.MainApplication</NAME>\n      <VERSION>1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.codiwans.cinesa.BaseApplication</NAME>\n      <VERSION>1.3.0.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.oxylane.android.decathlon.application.DecathlonApplication</NAME>\n      <VERSION>4.2.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.elsmillorscines.smartapp</NAME>\n      <VERSION>1.0.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.yelp.android.appdata.AppData</NAME>\n      <VERSION>8.22.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.mediamarkt.app.MediaMarktApp</NAME>\n      <VERSION>1.0.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.gsmtuneaway</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.fileexplorer.Application</NAME>\n      <VERSION>1.8.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qti.xdivert</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.stepsprovider.StepApplication</NAME>\n      <VERSION>2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.cloudprint.CloudPrintApplication</NAME>\n      <VERSION>1.36b</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.twitter.app.common.app.TwitterApplication</NAME>\n      <VERSION>6.22.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.metok.MIUIApplication</NAME>\n      <VERSION>2.0.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.musicfx</NAME>\n      <VERSION>1.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.colectivosvip.orange.porserorange.ApplicationBase</NAME>\n      <VERSION>1.0.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.gmm.base.app.GoogleMapsApplication</NAME>\n      <VERSION>9.40.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>1.4.209</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.cloudbackup.CloudBackupApplication</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.channel.ChannelApplication</NAME>\n      <VERSION>7.4.94</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.microsoft.office.word.WordApplication</NAME>\n      <VERSION>16.0.7426.1015</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.fdroid.fdroid.FDroidApp</NAME>\n      <VERSION>0.102-alpha2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>taxi.android.client.MyTaxiApplication</NAME>\n      <VERSION>6.8.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.cellbroadcastreceiver.CellBroadcastReceiverApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.webview</NAME>\n      <VERSION>54.0.2840.85</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.bemobile.letsbonus.app.LetsbonusApp</NAME>\n      <VERSION>3.2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.airecat</NAME>\n      <VERSION>1.0.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.onetimeinitializer</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>air.com.correos.eCommerce</NAME>\n      <VERSION>2.5.12</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mipay.common.CommonApp</NAME>\n      <VERSION>1.1.17</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.qrd.engineeringmode</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.jobtoday.app.App</NAME>\n      <VERSION>1.28</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.fitness.application.FitnessApplication</NAME>\n      <VERSION>1.61.11-106</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.comandia</NAME>\n      <VERSION>1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.server.telecom.TelecomApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.telepizza.TelepizzaApplication</NAME>\n      <VERSION>4.0.60120</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.noriginmedia.tv.ShellApplication</NAME>\n      <VERSION>2.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.trivago.TrivagoApplication</NAME>\n      <VERSION>3.7.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.adecom</NAME>\n      <VERSION>v1.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.keychain</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.camera.CameraAppImpl</NAME>\n      <VERSION>1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.chrome.ChromeApplicationInternal</NAME>\n      <VERSION>54.0.2840.68</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.backupreceiver</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.pass.PassApplication</NAME>\n      <VERSION>2.3.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.shop.MainApplication</NAME>\n      <VERSION>4.1.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.xmsf.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.linkedin.android.lookup.infra.app.LookupApplication</NAME>\n      <VERSION>1.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.klo.bugreport.KLOBugreportApplication</NAME>\n      <VERSION>1.0.43</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.medium.android.donkey.DonkeyApplication</NAME>\n      <VERSION>2.1.2124</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.iqiyi.qyplayer.MyApplication</NAME>\n      <VERSION>71.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>at.bluesource.application.MobilePocketApplication</NAME>\n      <VERSION>4.17.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.gms.common.app.GmsApplication</NAME>\n      <VERSION>9.8.77 (246-135396225)</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.gsf</NAME>\n      <VERSION>5.0.1-1602158</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.admitone.commoncode.A1_App</NAME>\n      <VERSION>2.3.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.fusioninventory.FusionInventoryApp</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.Aferry.Aferry</NAME>\n      <VERSION>3.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.oa.client.OctopusApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.packageinstaller.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.gesture.GestureApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.codeaurora.btmultisim</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.svox.pico</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.mitunes.MiTunes</NAME>\n      <VERSION>1.1021.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.dsi.ant.server</NAME>\n      <VERSION>4.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.finddevice.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.admitone.commoncode.A1_App</NAME>\n      <VERSION>2.3.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.tempos21.mobiret.micondis.CondisApp</NAME>\n      <VERSION>2.3.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.proxyhandler</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.ereza.properbusbcn.NextBusApplication</NAME>\n      <VERSION>5.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mo2o.alsa.application.AlsaApplication</NAME>\n      <VERSION>5.3.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.loadcarrier</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.tripadvisor.tripadvisor.TAApplication</NAME>\n      <VERSION>18.2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.zinio.mobile.android.reader.App</NAME>\n      <VERSION>2.8.20160701</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.liveboxmediashare.es</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qti.backupagent</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.mipub.Application</NAME>\n      <VERSION>1.0.5.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.notes.Application</NAME>\n      <VERSION>1.0.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.video.ui.MobileVideoApplication</NAME>\n      <VERSION>v2016102690(MiVideo-UN)</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.market.MarketApp</NAME>\n      <VERSION>6.10.8.320</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.musicvis</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.midrop.MiDropApplication</NAME>\n      <VERSION>1.0.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.correos.ecard.ECardApplication</NAME>\n      <VERSION>2.13.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.translationservice</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.cloudservice.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.managedprovisioning</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.conduint.ConduintApplication</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ubercab.client.core.app.RiderApplication</NAME>\n      <VERSION>3.127.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.dylvian.mango.activities.MangoApplication</NAME>\n      <VERSION>4.2.10</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.correos.homepaq</NAME>\n      <VERSION>2.0.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.dreams.phototable</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>org.microemu.android.model.common.VTUserApplicationBNRTMB.VTUserApplicationSmart</NAME>\n      <VERSION>5.2.1.31959</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.geosalutics.GeosaluticsApplication</NAME>\n      <VERSION>1.0.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.sohu.inputmethod.sogou.xiaomi.SogouAppApplication</NAME>\n      <VERSION>8.3.1009</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.touchassistant.AssistantApp</NAME>\n      <VERSION>8.1.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.rodalies.RodaliesApplication</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.o2o.O2OApplication</NAME>\n      <VERSION>3.3.712</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.vip.Application</NAME>\n      <VERSION>dev.1053</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ximalaya.ting.android.MainApplication</NAME>\n      <VERSION>5.4.45.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.providers.appindex</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ec.rpc.app.Application</NAME>\n      <VERSION>17.01</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.noisefield</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.carrierconfigure</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.consum.Consum</NAME>\n      <VERSION>2.4.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.unibail.URApplication</NAME>\n      <VERSION>4.8.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.securespaces.android.ssm.service.SpacesManagerApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.fingerprint.FingerprintApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.gsf.login</NAME>\n      <VERSION>5.0.1-1602158</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>android.support.multidex.MultiDexApplication</NAME>\n      <VERSION>1.15.11</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.smspush</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mediatek.factorymode.CMDUtils</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.calculator.Application</NAME>\n      <VERSION>10.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mfashiongallery.express.MainApplication</NAME>\n      <VERSION>PM816080802-A</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.alitalia.mobile.AlitaliaApplication</NAME>\n      <VERSION>3.0.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.keniu.security.MoSecurityApplication</NAME>\n      <VERSION>5.5.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.wallpaper.livepicker</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.gitify</NAME>\n      <VERSION>1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mi.AutoTest</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.airbnb.android.AppShell</NAME>\n      <VERSION>16.44.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.miwallpaper</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.gamecenter.GamecenterApp</NAME>\n      <VERSION>8.5.00.071</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.govern.AndroidApplication</NAME>\n      <VERSION>2.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.translate.TranslateApplication</NAME>\n      <VERSION>5.5.0.RC04.137189260</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.adobe.reader.misc.ARApp</NAME>\n      <VERSION>16.3.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.optimizecenter.Application</NAME>\n      <VERSION>1.2.9</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>pansandcompany.com.pansandcompany.PansApplication</NAME>\n      <VERSION>1.2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.accesscache</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wdstechnology.android.kryten</NAME>\n      <VERSION>1.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wallapop.WallapopApplication</NAME>\n      <VERSION>1.15.0.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.launcherunreadservice</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.analytics.App</NAME>\n      <VERSION>1.27.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.linkedin.android.infra.app.FlagshipApplication</NAME>\n      <VERSION>6.0.16</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qihoo.util.StubApp604782965</NAME>\n      <VERSION>1.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.settings.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.weather2.WeatherApplication</NAME>\n      <VERSION>8.1.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.ecommerce.bershka.Application</NAME>\n      <VERSION>1.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.stevie</NAME>\n      <VERSION>2.0.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.sysbase</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.books.app.TabletBooksApplication</NAME>\n      <VERSION>3.10.27</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.bigtop.BigTopApplication</NAME>\n      <VERSION>1.34 (137563954)</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.location</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.scanner.app.ScannerApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.ecommerce.uterque.Application</NAME>\n      <VERSION>2.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.duokan.reader.DkReaderPhone</NAME>\n      <VERSION>4.5.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ulabox</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mubiquo.lilla.data.AppContext_</NAME>\n      <VERSION>6.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.networkassistant.NetworkAssistantApplication</NAME>\n      <VERSION>V7.5.11.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.renfe.wsm.vlm.application.GlobalState</NAME>\n      <VERSION>2.3.13</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.chromecast.app.SetupApplication</NAME>\n      <VERSION>1.19.26</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.iberia.IberiaApp</NAME>\n      <VERSION>7.0.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.booking.BookingApplication</NAME>\n      <VERSION>11.3.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.proengsoft.vacunas.core.MyApplication</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.pushbullet.android.PushbulletApplication</NAME>\n      <VERSION>17.7.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.fingerprints.service.FingerprintService</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.yellowpage.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.antispam.AntiSpamAppliction</NAME>\n      <VERSION>1.0.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.audible.application.AudibleAndroidApplication</NAME>\n      <VERSION>2.9.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.stackexchange.marvin.Current</NAME>\n      <VERSION>1.0.89</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.wallpaper</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.inetmob</NAME>\n      <VERSION>0.6.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.services.secureui</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.inditex.zara.ZaraApplication</NAME>\n      <VERSION>2.1.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.soundcloud.android.SoundCloudApplication</NAME>\n      <VERSION>2016.11.01-release</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>net.skyscanner.go.application.GoApplication</NAME>\n      <VERSION>5.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>air.orange.app.tiendas</NAME>\n      <VERSION>3.4.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.hangouts.phone.Hangouts_Application</NAME>\n      <VERSION>14.0.136618992</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.appturbo.appturbo.AppController</NAME>\n      <VERSION>3.9.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.tsol.barcelonaalmobil.MyApp</NAME>\n      <VERSION>1.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.kingsoft.email.EmailApplication2</NAME>\n      <VERSION>MIUI_V8_EMAIL_20160902_b1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.voiceassist.VAApplication</NAME>\n      <VERSION>6.8.15</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.sina.weibo.WeiboApplication</NAME>\n      <VERSION>6.11.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wt.version_query</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.phone.MiuiPhoneApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.shell</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.here.app.HereApplication</NAME>\n      <VERSION>2.0.10854</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>areamovil.aviancataca</NAME>\n      <VERSION>2.1.7</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.groupon.GrouponApplication</NAME>\n      <VERSION>16.13.69422</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.providers.userdictionary</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.providers.weather</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.lunarinfo</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>me.pmpm.githubtrends.MainApplication</NAME>\n      <VERSION>1.1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.location.fused</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.unibail.URApplication</NAME>\n      <VERSION>4.8.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.tempos21.bustia.BustiaApplication</NAME>\n      <VERSION>2.6.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.burgerking.android.BKApplication</NAME>\n      <VERSION>2.1.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.securespaces.android.agent.SpacesAgentApplication</NAME>\n      <VERSION>1.0.10</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.deskclock.DeskClockApp</NAME>\n      <VERSION>8.0.1.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.airboxflybox.application.BoxApp</NAME>\n      <VERSION>AirboxFlybox-1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.engineertool.operation</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.authy.authy.Authy</NAME>\n      <VERSION>22.3.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.amap.android.location</NAME>\n      <VERSION>3.7.8_a010</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.securespaces.android.settings.SpacesSettingsApplication</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.qti.networksetting</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.hailocab.consumer.HailoApplication</NAME>\n      <VERSION>4.42</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.ebay.mobile.MyApp</NAME>\n      <VERSION>5.5.1.17</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>8.1.0.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.acc</NAME>\n      <VERSION>1.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.sem.controller.BaseApplication</NAME>\n      <VERSION>2.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.thememanager.ThemeApplicationProxy</NAME>\n      <VERSION>0.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.fastdormancy</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.despegar.AndroidApplication</NAME>\n      <VERSION>5.5.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.idealista.android.IdealistaApplication</NAME>\n      <VERSION>7.3.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.xiaomi.smarthome.application.SHApplication</NAME>\n      <VERSION>3.9.15</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.lbe.security.LBEApplication</NAME>\n      <VERSION>1.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.justeat.app.JEApplication</NAME>\n      <VERSION>3.17.1.435</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.correos.widget</NAME>\n      <VERSION>2.5</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.mi.vtalk.business.base.VTalkApplication</NAME>\n      <VERSION>1.4.76</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.whetstone.WhetstoneApplication</NAME>\n      <VERSION>2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.wow.holmesplace</NAME>\n      <VERSION>1.2.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.boira.nostrumnfc.Nostrum</NAME>\n      <VERSION>3.4.8</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>net.inverline.bancosabadell.officelocator.android.sab.app.SabApplication</NAME>\n      <VERSION>16.4.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.bluetooth.btservice.AdapterApp</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.qualcomm.timeservice</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.github.mobile</NAME>\n      <VERSION>1.9.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>miui.external.Application</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cat.gencat.mobi.oficinajove.OficinajoveApplication</NAME>\n      <VERSION>1.2.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.android.captiveportallogin</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>by.aleks.ghcwidget</NAME>\n      <VERSION>1.2</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.pplive.androidsdk.mi</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.video.plugin.VideoPluginApp</NAME>\n      <VERSION>1.0.3</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>cn.wps.moffice.OfficeApp</NAME>\n      <VERSION>9.9.6</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.orange.miorange</NAME>\n      <VERSION>5.1.1</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>es.vodafone.mobile.mivodafone.VodafoneApp</NAME>\n      <VERSION>4.0.4</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.internal.app.MiuiApplication</NAME>\n      <VERSION>1.8.0.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.home.launcher.Application</NAME>\n      <VERSION>1.0</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.miui.voip.base.VoipApp</NAME>\n      <VERSION>1.3.9</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.linkedin.android.learning.infra.app.LearningApplication</NAME>\n      <VERSION>0.1.315</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.google.android.apps.inputmethod.latin.LatinApp</NAME>\n      <VERSION>5.1.23.127065177-arm64-v8a</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n    <SOFTWARES>\n      <NAME>com.amazon.kcp.application.StandaloneApplication</NAME>\n      <VERSION>7.5.0.51</VERSION>\n      <FILESIZE>0</FILESIZE>\n      <FROM>apk</FROM>\n    </SOFTWARES>\n  </CONTENT>\n</REQUEST>\n"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "H.- Auth",
			"description": "",
			"item": [
				{
					"name": "Init session as glpi user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Valid session_token\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "glpi",
								"password": "glpi",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Z2xwaTpnbHBp",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				},
				{
					"name": "Get an agent by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"computer1_id\", jsonData.computers_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains version\"] = responseBody.has(\"version\");",
									"tests[\"Body contains computers_id\"] = responseBody.has(\"computers_id\");",
									"tests[\"Body contains wipe\"] = responseBody.has(\"wipe\");",
									"tests[\"Body contains lock\"] = responseBody.has(\"lock\");",
									"tests[\"Body contains enroll_status\"] = responseBody.has(\"enroll_status\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains fleets_id\"] = responseBody.has(\"fleets_id\");",
									"tests[\"Body contains last_report\"] = responseBody.has(\"last_report\");",
									"tests[\"Body contains last_contact\"] = responseBody.has(\"last_contact\");",
									"tests[\"Body contains certificate\"] = responseBody.has(\"certificate\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid version\"] = Object.prototype.toString.call(jsonData.version) === \"[object String]\";",
									"tests[\"Valid computers_id\"] = Number.isInteger(jsonData.computers_id);",
									"tests[\"Valid wipe\"] = Number.isInteger(jsonData.wipe);",
									"tests[\"Valid lock\"] = Number.isInteger(jsonData.lock);",
									"tests[\"Valid enroll_status\"] = Object.prototype.toString.call(jsonData.enroll_status) === \"[object String]\";",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid _fleets_id\"] = Number.isInteger(jsonData[environment.plugin_alias + '_fleets_id']);",
									"tests[\"Valid last_report\"] = (jsonData.last_report === null);",
									"tests[\"Valid last_contact\"] = (jsonData.last_contact === null);",
									"tests[\"Valid certificate\"] = Object.prototype.toString.call(jsonData.certificate) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent/{{agent1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of Agent identified by id."
					},
					"response": []
				},
				{
					"name": "Add geolocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"geolocation1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var d = new Date(),",
									"seconds = d.getSeconds().toString().length == 1 ? '0'+d.getSeconds() : d.getSeconds(),",
									"minutes = d.getMinutes().toString().length == 1 ? '0'+d.getMinutes() : d.getMinutes(),",
									"hours = d.getHours().toString().length == 1 ? '0'+d.getHours() : d.getHours(),",
									"months = d.getMonth().toString().length == 1 ? '0'+d.getMonth() : d.getMonth();",
									"var date = d.getFullYear()+'-'+(months+1)+'-'+d.getDate()+' '+hours+':'+minutes+':'+seconds;",
									"postman.setEnvironmentVariable('date1', date);",
									"var latitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"var longitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"postman.setEnvironmentVariable('latitude1', latitude);",
									"postman.setEnvironmentVariable('longitude1', longitude);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n  \t\"computers_id\": {{computer1_id}},\r\n    \"latitude\": {{latitude1}},\r\n    \"longitude\": {{longitude1}},\r\n    \"date\": \"{{date1}}\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add geolocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"geolocation2_id\", jsonData[0].id);",
									"postman.setEnvironmentVariable(\"geolocation3_id\", jsonData[1].id);",
									"postman.setEnvironmentVariable(\"geolocation4_id\", jsonData[2].id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[1].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[2].id);"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var d = new Date(),",
									"seconds = d.getSeconds().toString().length == 1 ? '0'+d.getSeconds() : d.getSeconds(),",
									"minutes = d.getMinutes().toString().length == 1 ? '0'+d.getMinutes() : d.getMinutes(),",
									"hours = d.getHours().toString().length == 1 ? '0'+d.getHours() : d.getHours(),",
									"months = d.getMonth().toString().length == 1 ? '0'+d.getMonth() : d.getMonth();",
									"var date = d.getFullYear()+'-'+(months+1)+'-'+d.getDate()+' '+hours+':'+minutes+':'+seconds;",
									"postman.setEnvironmentVariable('date2', date);",
									"d = new Date();",
									"date = d.getFullYear()+'-'+(months+1)+'-'+d.getDate()+' '+hours+':'+minutes+':'+seconds;",
									"postman.setEnvironmentVariable('date3', date);",
									"d = new Date();",
									"date = d.getFullYear()+'-'+(months+1)+'-'+d.getDate()+' '+hours+':'+minutes+':'+seconds;",
									"postman.setEnvironmentVariable('date4', date);",
									"var latitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"var longitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"postman.setEnvironmentVariable('latitude2', latitude);",
									"postman.setEnvironmentVariable('longitude2', longitude);",
									"latitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"longitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"postman.setEnvironmentVariable('latitude3', latitude);",
									"postman.setEnvironmentVariable('longitude3', longitude);",
									"latitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"longitude = (Math.random() * (180 - (-180)) + -180).toFixed(3) * 1;",
									"postman.setEnvironmentVariable('latitude4', latitude);",
									"postman.setEnvironmentVariable('longitude4', longitude);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n  \t\"computers_id\": {{computer1_id}},\r\n    \"latitude\": {{latitude2}},\r\n    \"longitude\": {{longitude2}},\r\n    \"date\": \"{{date2}}\"\r\n    },\r\n    {\r\n  \t\"computers_id\": {{computer1_id}},\r\n    \"latitude\": {{latitude3}},\r\n    \"longitude\": {{longitude3}},\r\n    \"date\": \"{{date3}}\"\r\n    },\r\n    {\r\n  \t\"computers_id\": {{computer1_id}},\r\n    \"latitude\": {{latitude4}},\r\n    \"longitude\": {{longitude4}},\r\n    \"date\": \"{{date4}}\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Add multiple objects into GLPi."
					},
					"response": []
				},
				{
					"name": "Init session as basic auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Valid session_token\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "user1@teclib.com",
								"password": "********",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic dXNlcjFAdGVjbGliLmNvbToqKioqKioqKg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				}
			]
		},
		{
			"name": "I.- Geolocation",
			"description": "",
			"item": [
				{
					"name": "Get a geolocation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains computers_id\"] = responseBody.has(\"computers_id\");",
									"tests[\"Body contains latitude\"] = responseBody.has(\"latitude\");",
									"tests[\"Body contains longitude\"] = responseBody.has(\"longitude\");",
									"tests[\"Body contains date\"] = responseBody.has(\"date\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid computers_id\"] = Number.isInteger(jsonData.computers_id);",
									"tests[\"Valid latitude\"] = Number(jsonData.latitude) === jsonData.latitude && jsonData.latitude % 1 !== 0;",
									"tests[\"Valid longitude\"] = Number(jsonData.longitude) === jsonData.longitude && jsonData.longitude % 1 !== 0;",
									"tests[\"Valid date\"] = Object.prototype.toString.call(jsonData.date) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation/{{geolocation1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all geolocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the geolocation."
					},
					"response": []
				},
				{
					"name": "Delete geolocation by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var geolocation1_id = postman.getEnvironmentVariable(\"geolocation1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][geolocation1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation/{{geolocation1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete geolocation by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var geolocation2_id = postman.getEnvironmentVariable(\"geolocation2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][geolocation2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{geolocation2_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete geolocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var geolocation3_id = postman.getEnvironmentVariable(\"geolocation3_id\");",
									"var geolocation4_id = postman.getEnvironmentVariable(\"geolocation4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\"); ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Geolocation 3 return true\"] = jsonData[0][geolocation3_id];",
									"tests[\"Geolocation 4 return true\"] = jsonData[1][geolocation4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Geolocation",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{geolocation3_id}}\r\n    },\r\n    {\r\n      \"id\": {{geolocation4_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Geolocation",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search geolocations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Geolocation?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Geolocation/?forcedisplay[0]=2&forcedisplay[1]=3&forcedisplay[2]=4&forcedisplay[3]=5&forcedisplay[4]=6&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "J.- InvitationLog",
			"description": "",
			"item": [
				{
					"name": "Get all logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"invitation_log_id\", jsonData[0].id); ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}InvitationLog",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the invitation logs."
					},
					"response": []
				},
				{
					"name": "Get a log",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains invitations_id\"] = responseBody.has(\"invitations_id\");",
									"tests[\"Body contains date_creation\"] = responseBody.has(\"date_creation\");",
									"tests[\"Body contains event\"] = responseBody.has(\"event\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid ID\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid invitations_id\"] = Number.isInteger(jsonData[environment['plugin_alias'] + '_invitations_id']);",
									"tests[\"Valid date_creation\"] = Object.prototype.toString.call(jsonData.date_creation) === \"[object String]\";",
									"tests[\"Valid event\"] = Object.prototype.toString.call(jsonData.event) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}InvitationLog/{{invitation_log_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get invitation logs as sub item",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Invitation/{{user5_invitation_id}}/{{PluginAlias}}InvitationLog",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}InvitationLog",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}InvitationLog?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}InvitationLog/?forcedisplay[0]=2&forcedisplay[1]=3&forcedisplay[2]=4&forcedisplay[3]=5&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "K.- Fleet",
			"description": "",
			"item": [
				{
					"name": "Add fleet",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fleet1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"name\": \"Fleet 1\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add fleets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fleet2_id\", jsonData[0].id);",
									"postman.setEnvironmentVariable(\"fleet3_id\", jsonData[1].id);",
									"postman.setEnvironmentVariable(\"fleet4_id\", jsonData[2].id);",
									"postman.setEnvironmentVariable(\"fleet5_id\", jsonData[3].id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[1].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[2].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[3].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"name\": \"Fleet 2\"\r\n    },\r\n    {\r\n      \"name\": \"Fleet 3\"\r\n    },\r\n    {\r\n      \"name\": \"Fleet 4\"\r\n    },\r\n    {\r\n      \"name\": \"Fleet 5\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Add multiple objects into GLPi."
					},
					"response": []
				},
				{
					"name": "Get all fleets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fleet0_id\", jsonData[0].id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Valid fleet id\"] = Number.isInteger(jsonData[0].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the fleets."
					},
					"response": []
				},
				{
					"name": "Get a fleet",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains is_default\"] = responseBody.has(\"is_default\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid is_default\"] = Number.isInteger(jsonData.is_default);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid links 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid links 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet/{{fleet0_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Update fleet by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet1_id = postman.getEnvironmentVariable(\"fleet1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet/{{fleet1_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"name\": \"Fleet 1 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update fleet by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet2_id = postman.getEnvironmentVariable(\"fleet2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{fleet2_id}},\r\n    \"name\": \"Fleet 2 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update fleets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet3_id = postman.getEnvironmentVariable(\"fleet3_id\");",
									"var fleet4_id = postman.getEnvironmentVariable(\"fleet4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Fleet 3 return true\"] = jsonData[0][fleet3_id]; ",
									"tests[\"Fleet 4 return true\"] = jsonData[1][fleet4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{fleet3_id}},\r\n      \"name\": \"Fleet 3 edited\"\r\n    },\r\n    {\r\n      \"id\": {{fleet4_id}},\r\n      \"name\": \"Fleet 4 edited\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete fleet by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet1_id = postman.getEnvironmentVariable(\"fleet1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet/{{fleet1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete fleet by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet2_id = postman.getEnvironmentVariable(\"fleet2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{fleet2_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete fleets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet3_id = postman.getEnvironmentVariable(\"fleet3_id\");",
									"var fleet4_id = postman.getEnvironmentVariable(\"fleet4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\"); ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Fleet 3 return true\"] = jsonData[0][fleet3_id];",
									"tests[\"Fleet 4 return true\"] = jsonData[1][fleet4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{fleet3_id}}\r\n    },\r\n    {\r\n      \"id\": {{fleet4_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Fleet",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search fleets",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Fleet?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Fleet/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&forcedisplay[3]=4&forcedisplay[4]=5&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "L.- Agent",
			"description": "",
			"item": [
				{
					"name": "Get an agent by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"computer1_id\", jsonData.computers_id);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains version\"] = responseBody.has(\"version\");",
									"tests[\"Body contains computers_id\"] = responseBody.has(\"computers_id\");",
									"tests[\"Body contains wipe\"] = responseBody.has(\"wipe\");",
									"tests[\"Body contains lock\"] = responseBody.has(\"lock\");",
									"tests[\"Body contains enroll_status\"] = responseBody.has(\"enroll_status\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains fleets_id\"] = responseBody.has(\"fleets_id\");",
									"tests[\"Body contains last_report\"] = responseBody.has(\"last_report\");",
									"tests[\"Body contains last_contact\"] = responseBody.has(\"last_contact\");",
									"tests[\"Body contains certificate\"] = responseBody.has(\"certificate\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"rel\");",
									"tests[\"Body contains href\"] = responseBody.has(\"href\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid version\"] = Object.prototype.toString.call(jsonData.version) === \"[object String]\";",
									"tests[\"Valid computers_id\"] = Number.isInteger(jsonData.computers_id);",
									"tests[\"Valid wipe\"] = Number.isInteger(jsonData.wipe);",
									"tests[\"Valid lock\"] = Number.isInteger(jsonData.lock);",
									"tests[\"Valid enroll_status\"] = Object.prototype.toString.call(jsonData.enroll_status) === \"[object String]\";",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid _fleets_id\"] = Number.isInteger(jsonData[environment.plugin_alias + '_fleets_id']);",
									"tests[\"Valid last_report\"] = (jsonData.last_report === null);",
									"tests[\"Valid last_contact\"] = (jsonData.last_contact === null);",
									"tests[\"Valid certificate\"] = Object.prototype.toString.call(jsonData.certificate) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent/{{agent1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of Agent identified by id."
					},
					"response": []
				},
				{
					"name": "Get all agents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the agent."
					},
					"response": []
				},
				{
					"name": "Update agent by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var agent1_id = postman.getEnvironmentVariable(\"agent1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][agent1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent/{{agent1_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"{{plugin_alias}}_fleets_id\": {{fleet5_id}}\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update agent by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var agent1_id = postman.getEnvironmentVariable(\"agent1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][agent1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{agent1_id}},\r\n    \"name\": \"Agent 1 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update agents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var agent1_id = postman.getEnvironmentVariable(\"agent1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Agent 1 return true\"] = jsonData[0][agent1_id]; ",
									"tests[\"Agent 1 return true\"] = jsonData[1][agent1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{agent1_id}},\r\n      \"name\": \"user5@teclib.com\"\r\n    },\r\n    {\r\n      \"id\": {{agent1_id}},\r\n      \"{{plugin_alias}}_fleets_id\": {{fleet5_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete agent  by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var agent1_id = postman.getEnvironmentVariable(\"agent1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][agent1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent/{{agent1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete agent by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 404\"] = responseCode.code === 400;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Bad Request\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains ERROR_GLPI_DELETE\"] = responseBody.has(\"ERROR_GLPI_DELETE\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{agent1_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete agents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 400\"] = responseCode.code === 400;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Bad Request\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains ERROR_GLPI_DELETE\"] = responseBody.has(\"ERROR_GLPI_DELETE\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Agent",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{agent1_id}}\r\n    },\r\n    {\r\n      \"id\": {{agent1_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Agent",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search agents",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Agent?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Agent/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&forcedisplay[3]=4&forcedisplay[4]=5&forcedisplay[5]=6&forcedisplay[6]=7&forcedisplay[7]=8&forcedisplay[8]=9&forcedisplay[9]=10&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "M.- Policy",
			"description": "",
			"item": [
				{
					"name": "Get a policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains group\"] = responseBody.has(\"group\");",
									"tests[\"Body contains symbol\"] = responseBody.has(\"symbol\");",
									"tests[\"Body contains type\"] = responseBody.has(\"type\");",
									"tests[\"Body contains type_data\"] = responseBody.has(\"type_data\");",
									"tests[\"Body contains unicity\"] = responseBody.has(\"unicity\");",
									"tests[\"Body contains policycategories_id\"] = responseBody.has(\"policycategories_id\");",
									"tests[\"Body contains comment\"] = responseBody.has(\"comment\");",
									"tests[\"Body contains default_value\"] = responseBody.has(\"default_value\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid group\"] = Object.prototype.toString.call(jsonData.group) === \"[object String]\";",
									"tests[\"Valid symbol\"] = Object.prototype.toString.call(jsonData.symbol) === \"[object String]\";",
									"tests[\"Valid type\"] = Object.prototype.toString.call(jsonData.type) === \"[object String]\";",
									"tests[\"Valid type_data\"] = Object.prototype.toString.call(jsonData.type_data) === \"[object String]\";",
									"tests[\"Valid unicity\"] = Number.isInteger(jsonData.unicity);",
									"tests[\"Valid policycategories_id\"] = Number.isInteger(jsonData[environment['plugin_alias'] + '_policycategories_id']);",
									"tests[\"Valid comment\"] = Object.prototype.toString.call(jsonData.comment) === \"[object String]\";",
									"tests[\"Valid default_value\"] = Object.prototype.toString.call(jsonData.default_value) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Policy/1",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"var deploy_app_id = jsonData[jsonData.map(function (x){return x.symbol;}).indexOf(\"deployApp\")].id;",
									"postman.setEnvironmentVariable(\"deploy_app_id\", deploy_app_id);",
									"var remove_app_id = jsonData[jsonData.map(function (x){return x.symbol;}).indexOf(\"removeApp\")].id;",
									"postman.setEnvironmentVariable(\"remove_app_id\", remove_app_id);",
									"var deploy_file_id = jsonData[jsonData.map(function (x){return x.symbol;}).indexOf(\"deployFile\")].id;",
									"postman.setEnvironmentVariable(\"deploy_file_id\", deploy_file_id);",
									"var remove_file_id = jsonData[jsonData.map(function (x){return x.symbol;}).indexOf(\"removeFile\")].id;",
									"postman.setEnvironmentVariable(\"remove_file_id\", remove_file_id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Policy?range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the policies."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Policy",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Policy?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Policy/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&forcedisplay[3]=4&forcedisplay[4]=5&forcedisplay[5]=6&forcedisplay[6]=7&forcedisplay[7]=8&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "N.- PolicyCategory",
			"description": "",
			"item": [
				{
					"name": "Get a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains comment\"] = responseBody.has(\"comment\");",
									"tests[\"Body contains completename\"] = responseBody.has(\"completename\");",
									"tests[\"Body contains level\"] = responseBody.has(\"level\");",
									"tests[\"Body contains sons_cache\"] = responseBody.has(\"sons_cache\");",
									"tests[\"Body contains ancestors_cache\"] = responseBody.has(\"ancestors_cache\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid comment\"] = Object.prototype.toString.call(jsonData.comment) === \"[object String]\";",
									"tests[\"Valid completename\"] = Object.prototype.toString.call(jsonData.completename) === \"[object String]\";",
									"tests[\"Valid policycategories_id\"] = Number.isInteger(jsonData[environment.plugin_alias + '_policycategories_id']);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid level\"] = Number.isInteger(jsonData.level);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}PolicyCategory/2",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}PolicyCategory",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the categories."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}PolicyCategory",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}PolicyCategory?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}PolicyCategory/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "O.- WellknownPath",
			"description": "",
			"item": [
				{
					"name": "Get a path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains comment\"] = responseBody.has(\"comment\");",
									"tests[\"Body contains is_default\"] = responseBody.has(\"is_default\");",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid comment\"] = Object.prototype.toString.call(jsonData.comment) === \"[object String]\";",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid is_default\"] = Number.isInteger(jsonData.is_default);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}WellknownPath/2",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all paths",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}WellknownPath",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the well known paths."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}WellknownPath",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search paths",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}WellknownPath?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}WellknownPath/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&forcedisplay[3]=4&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "P.- EntityConfig",
			"description": "",
			"item": [
				{
					"name": "Get all configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user1_entity_id\", jsonData[0].entities_id); ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData[0].entities_id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Entityconfig",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the entity configuration."
					},
					"response": []
				},
				{
					"name": "Get a configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains enroll_token\"] = responseBody.has(\"enroll_token\");",
									"tests[\"Body contains agent_token_life\"] = responseBody.has(\"agent_token_life\");",
									"tests[\"Body contains managed\"] = responseBody.has(\"managed\");",
									"tests[\"Body contains download_url\"] = responseBody.has(\"download_url\");",
									"tests[\"Body contains device_limit\"] = responseBody.has(\"device_limit\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid enroll_token\"] = Object.prototype.toString.call(jsonData.enroll_token) === \"[object String]\";",
									"tests[\"Valid agent_token_life\"] = Object.prototype.toString.call(jsonData.agent_token_life) === \"[object String]\";",
									"tests[\"Valid managed\"] = Number.isInteger(jsonData.managed);",
									"tests[\"Valid download_url\"] = Object.prototype.toString.call(jsonData.download_url) === \"[object String]\";",
									"tests[\"Valid device_limit\"] = Number.isInteger(jsonData.device_limit);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Entityconfig/{{user1_entity_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Update configuration by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_entity_id = postman.getEnvironmentVariable(\"user1_entity_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user1_entity_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}EntityConfig/{{user1_entity_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"download_url\": \"\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update configuration by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_entity_id = postman.getEnvironmentVariable(\"user1_entity_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][user1_entity_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}EntityConfig",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{user1_entity_id}},\r\n    \"agent_token_life\": \"P7D\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}EntityConfig",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}EntityConfig?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}EntityConfig/?forcedisplay[0]=2&forcedisplay[1]=3&forcedisplay[2]=4&forcedisplay[3]=5&forcedisplay[4]=6&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Q.- File",
			"description": "",
			"item": [
				{
					"name": "Add file 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"file1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"name\":\"File 1\"}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "testFile.txt"
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add file 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"file2_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"name\":\"File 2\"}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "testFile.txt"
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add file 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"file3_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"name\":\"File 3\"}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "testFile.txt"
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add file 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"file4_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"name\":\"File 4\"}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "testFile.txt"
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add file 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"file5_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"name\":\"File 5\"}}",
									"type": "text",
									"enabled": true
								},
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "testFile.txt"
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Get a file",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains source\"] = responseBody.has(\"source\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains version\"] = responseBody.has(\"version\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid source\"] = Object.prototype.toString.call(jsonData.source) === \"[object String]\";",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid version\"] = Number.isInteger(jsonData.version);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File/{{file1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all files",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the files."
					},
					"response": []
				},
				{
					"name": "Update file by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file1_id = postman.getEnvironmentVariable(\"file1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][file1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File/{{file1_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"name\": \"File 1 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update file by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file2_id = postman.getEnvironmentVariable(\"file2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][file2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{file2_id}},\r\n    \"name\": \"File 2 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update files",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file3_id = postman.getEnvironmentVariable(\"file3_id\");",
									"var file4_id = postman.getEnvironmentVariable(\"file4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"File 3 return true\"] = jsonData[0][file3_id];",
									"tests[\"File 4 return true\"] = jsonData[1][file4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{file3_id}},\r\n      \"name\": \"File 3 edited\"\r\n    },\r\n    {\r\n      \"id\": {{file4_id}},\r\n      \"name\": \"File 4 edited\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete file by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file1_id = postman.getEnvironmentVariable(\"file1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][file1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File/{{file1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete file by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file2_id = postman.getEnvironmentVariable(\"file2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][file2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{file2_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete files",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var file3_id = postman.getEnvironmentVariable(\"file3_id\");",
									"var file4_id = postman.getEnvironmentVariable(\"file4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"File 3 return true\"] = jsonData[0][file3_id];",
									"tests[\"File 4 return true\"] = jsonData[1][file4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}File",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{file3_id}}\r\n    },\r\n    {\r\n      \"id\": {{file4_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}File",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search files",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}File?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}File/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "R.- Package",
			"description": "",
			"item": [
				{
					"name": "Add package 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "2048.apk"
								},
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"alias\":\"App 1\"}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add package 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app2_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "2048.apk"
								},
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"alias\":\"App 2\"}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add package 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app3_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "2048.apk"
								},
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"alias\":\"App 3\"}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add package 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app4_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "2048.apk"
								},
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"alias\":\"App 4\"}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add package 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app5_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"description": ""
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"enabled": true,
									"src": "2048.apk"
								},
								{
									"key": "uploadManifest",
									"value": "{\"input\":{\"alias\":\"App 5\"}}",
									"type": "text",
									"enabled": true
								}
							]
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Get a package",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"app5_name\", jsonData.name);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains name\"] = responseBody.has(\"name\");",
									"tests[\"Body contains alias\"] = responseBody.has(\"alias\");",
									"tests[\"Body contains version\"] = responseBody.has(\"version\");",
									"tests[\"Body contains version_code\"] = responseBody.has(\"version_code\");",
									"tests[\"Body contains icon\"] = responseBody.has(\"icon\");",
									"tests[\"Body contains filename\"] = responseBody.has(\"filename\");",
									"tests[\"Body contains filesize\"] = responseBody.has(\"filesize\");",
									"tests[\"Body contains entities_id\"] = responseBody.has(\"entities_id\");",
									"tests[\"Body contains dl_filename\"] = responseBody.has(\"dl_filename\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid name\"] = Object.prototype.toString.call(jsonData.name) === \"[object String]\";",
									"tests[\"Valid alias\"] = Object.prototype.toString.call(jsonData.alias) === \"[object String]\";",
									"tests[\"Valid version\"] = Object.prototype.toString.call(jsonData.version.toString()) === \"[object String]\";",
									"tests[\"Valid version_code\"] = Number.isInteger(jsonData.version_code);",
									"tests[\"Valid icon\"] = Object.prototype.toString.call(jsonData.icon) === \"[object String]\";",
									"tests[\"Valid filename\"] = Object.prototype.toString.call(jsonData.filename) === \"[object String]\";",
									"tests[\"Valid filesize\"] = Number.isInteger(jsonData.filesize);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData.entities_id);",
									"tests[\"Valid dl_filename\"] = Object.prototype.toString.call(jsonData.dl_filename) === \"[object String]\";",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package/{{app1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of packages identified by id."
					},
					"response": []
				},
				{
					"name": "Get all packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the packages."
					},
					"response": []
				},
				{
					"name": "Update package by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app1_id = postman.getEnvironmentVariable(\"app1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][app1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package/{{app1_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"alias\": \"App 1 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update package by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app2_id = postman.getEnvironmentVariable(\"app2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][app2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{app2_id}},\r\n    \"alias\": \"App 2 edited\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app3_id = postman.getEnvironmentVariable(\"app3_id\");",
									"var app4_id = postman.getEnvironmentVariable(\"app4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"App 3 return true\"] = jsonData[0][app3_id];",
									"tests[\"App 4 return true\"] = jsonData[1][app4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{app3_id}},\r\n      \"alias\": \"App 3 edited\"\r\n    },\r\n    {\r\n      \"id\": {{app4_id}},\r\n      \"alias\": \"App 4 edited\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete package by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app1_id = postman.getEnvironmentVariable(\"app1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][app1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package/{{app1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete package by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app2_id = postman.getEnvironmentVariable(\"app2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][app2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{app2_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var app3_id = postman.getEnvironmentVariable(\"app3_id\");",
									"var app4_id = postman.getEnvironmentVariable(\"app4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"App 3 return true\"] = jsonData[0][app3_id];",
									"tests[\"App 4 return true\"] = jsonData[1][app4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Package",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{app3_id}}\r\n    },\r\n    {\r\n      \"id\": {{app4_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Package",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Package?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Package/?forcedisplay[0]=1&forcedisplay[1]=2&forcedisplay[2]=3&forcedisplay[3]=4&forcedisplay[4]=5&forcedisplay[5]=6&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "S.- Fleet_Policy",
			"description": "",
			"item": [
				{
					"name": "Add policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fleet_policy1_id\", jsonData.id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n    \"{{plugin_alias}}_policies_id\": 1,\r\n    \"value\": \"PASSWORD_PIN\"\r\n  }\r\n}"
						},
						"description": "Add an object into GLPi."
					},
					"response": []
				},
				{
					"name": "Add policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"fleet_policy2_id\", jsonData[0].id);",
									"postman.setEnvironmentVariable(\"fleet_policy3_id\", jsonData[1].id);",
									"postman.setEnvironmentVariable(\"fleet_policy4_id\", jsonData[2].id);",
									"postman.setEnvironmentVariable(\"fleet_policy5_id\", jsonData[3].id);",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"Created\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[0].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[1].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[2].id);",
									"tests[\"Valid id\"] = Number.isInteger(jsonData[3].id);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "POST",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n\t{\r\n\t  \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n\t  \"{{plugin_alias}}_policies_id\": 2,\r\n\t  \"value\": 6\r\n\t},\r\n\t{\r\n\t  \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n\t  \"{{plugin_alias}}_policies_id\": 20,\r\n\t  \"value\": true\r\n\t},\r\n    {\r\n      \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n      \"{{plugin_alias}}_policies_id\": {{deploy_app_id}},\r\n      \"value\": {\r\n        \"remove_on_delete\": 0\r\n      },\r\n      \"itemtype\": \"{{PluginAlias}}Package\",\r\n      \"items_id\": {{app5_id}}\r\n    },\r\n    {\r\n      \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n      \"{{plugin_alias}}_policies_id\": {{remove_app_id}},\r\n      \"value\": \"{{app5_name}}\"\r\n    },\r\n    {\r\n      \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n      \"{{plugin_alias}}_policies_id\": {{deploy_file_id}},\r\n      \"value\": {\r\n        \"destination\": \"{{file5_destination}}\",\r\n        \"remove_on_delete\": 0\r\n      },\r\n      \"itemtype\": \"{{PluginAlias}}File\",\r\n      \"items_id\": {{file5_id}}\r\n    },\r\n    {\r\n      \"{{plugin_alias}}_fleets_id\": {{fleet5_id}},\r\n      \"{{plugin_alias}}_policies_id\": {{remove_file_id}},\r\n      \"value\": \"{{file5_destination}}\"\r\n    }\r\n  ]\r\n}"
						},
						"description": "Add multiple objects into GLPi."
					},
					"response": []
				},
				{
					"name": "Get a policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Header contains Content-Type\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains id\"] = responseBody.has(\"id\");",
									"tests[\"Body contains fleets_id\"] = responseBody.has(\"fleets_id\");",
									"tests[\"Body contains policies_id\"] = responseBody.has(\"policies_id\");",
									"tests[\"Body contains value\"] = responseBody.has(\"value\");",
									"tests[\"Body contains itemtype\"] = responseBody.has(\"itemtype\");",
									"tests[\"Body contains items_id\"] = responseBody.has(\"items_id\");",
									"tests[\"Body contains links\"] = responseBody.has(\"links\");",
									"tests[\"Body contains rel\"] = responseBody.has(\"links\");",
									"tests[\"Body contains href\"] = responseBody.has(\"links\");",
									"tests[\"Valid id\"] = Number.isInteger(jsonData.id);",
									"tests[\"Valid fleets_id\"] = Number.isInteger(jsonData[environment['plugin_alias'] + '_fleets_id']);",
									"tests[\"Valid policies_id\"] = Number.isInteger(jsonData[environment['plugin_alias'] + '_policies_id']);",
									"tests[\"Valid value\"] = Object.prototype.toString.call(jsonData.value) === \"[object String]\";",
									"tests[\"Valid itemtype\"] = Object.prototype.toString.call(jsonData.itemtype) === \"[object String]\";",
									"tests[\"Valid items_id\"] = Number.isInteger(jsonData.items_id);",
									"tests[\"Valid links\"] = Array.isArray(jsonData.links);",
									"tests[\"Valid link 1 rel\"] = Object.prototype.toString.call(jsonData.links[0].rel) === \"[object String]\";",
									"tests[\"Valid link 1 href\"] = Object.prototype.toString.call(jsonData.links[0].href) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy/{{fleet_policy1_id}}",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return the instance fields of ItemType identified by id."
					},
					"response": []
				},
				{
					"name": "Get all policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the policy."
					},
					"response": []
				},
				{
					"name": "Update policy by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy1_id = postman.getEnvironmentVariable(\"fleet_policy1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet_policy1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy/{{fleet_policy1_id}}",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"value\": \"PASSWORD_NONE\"\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update policy by id as payload body ",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy2_id = postman.getEnvironmentVariable(\"fleet_policy2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet_policy2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{fleet_policy2_id}},\r\n    \"value\": 8\r\n  }\r\n}"
						},
						"description": "Update an object existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Update policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy2_id = postman.getEnvironmentVariable(\"fleet_policy2_id\");",
									"var fleet_policy3_id = postman.getEnvironmentVariable(\"fleet_policy3_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Policy 1 return true\"] = jsonData[0][fleet_policy2_id]; ",
									"tests[\"Policy 1 return true\"] = jsonData[1][fleet_policy3_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "PUT",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{fleet_policy2_id}},\r\n      \"value\": 6\r\n    },\r\n    {\r\n      \"id\": {{fleet_policy3_id}},\r\n      \"value\": false\r\n    }\r\n  ]\r\n}"
						},
						"description": "Update multiple objects existing in GLPI."
					},
					"response": []
				},
				{
					"name": "Delete policy by id as path",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy1_id = postman.getEnvironmentVariable(\"fleet_policy1_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet_policy1_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy/{{fleet_policy1_id}}",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete policy by id as payload body",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy2_id = postman.getEnvironmentVariable(\"fleet_policy2_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Return true\"] = jsonData[0][fleet_policy2_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": {\r\n    \"id\": {{fleet_policy2_id}}\r\n  }\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var fleet_policy3_id = postman.getEnvironmentVariable(\"fleet_policy3_id\");",
									"var fleet_policy4_id = postman.getEnvironmentVariable(\"fleet_policy4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Policy 3 return true\"] = jsonData[0][fleet_policy3_id];",
									"tests[\"Policy 4 return true\"] = jsonData[1][fleet_policy4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Fleet_Policy",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{fleet_policy3_id}}\r\n    },\r\n    {\r\n      \"id\": {{fleet_policy4_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				},
				{
					"name": "List of search options",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/listSearchOptions/{{PluginAlias}}Fleet_Policy",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "List the search options of provident ItemType to use with search items"
					},
					"response": []
				},
				{
					"name": "Search policies",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Fleet_Policy?criteria[0][field]=2&criteria[0][searchtype]=contains&criteria[0][value]=\"\"",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Expose the GLPI searchEngine and combine criteria to retrieve a list of elements of specified itemtype."
					},
					"response": []
				},
				{
					"name": "Force display all with uid",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains totalcount\"] = responseBody.has(\"totalcount\");",
									"tests[\"Body contains count\"] = responseBody.has(\"count\");",
									"tests[\"Body contains sort\"] = responseBody.has(\"sort\");",
									"tests[\"Body contains order\"] = responseBody.has(\"order\");",
									"tests[\"Body contains content-range\"] = responseBody.has(\"content-range\");"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/search/{{PluginAlias}}Fleet_Policy/?forcedisplay[0]=2&forcedisplay[1]=3&forcedisplay[2]=4&forcedisplay[3]=5&forcedisplay[4]=6&uid_cols&range=0-1000",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Array of all columns to display with unique ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Z.- Clean Up",
			"description": "",
			"item": [
				{
					"name": "Init session as basic auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Session Token is valid\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "user2@teclib.com",
								"password": "********",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic dXNlcjJAdGVjbGliLmNvbToqKioqKioqKg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				},
				{
					"name": "Get all configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user2_entity_id\", jsonData[0].entities_id); ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData[0].entities_id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Entityconfig",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the entity configuration."
					},
					"response": []
				},
				{
					"name": "Init session as basic auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Session Token is valid\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "user3@teclib.com",
								"password": "********",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic dXNlcjNAdGVjbGliLmNvbToqKioqKioqKg==",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				},
				{
					"name": "Get all configurations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"user3_entity_id\", jsonData[0].entities_id); ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Accept-Range is present\"] = postman.getResponseHeader(\"Accept-Range\");",
									"tests[\"Content-Range is present\"] = postman.getResponseHeader(\"Content-Range\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Valid entities_id\"] = Number.isInteger(jsonData[0].entities_id);",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/{{PluginAlias}}Entityconfig",
						"method": "GET",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Return a collection of rows of the entity configuration."
					},
					"response": []
				},
				{
					"name": "Init session as glpi user",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"session_token\", jsonData.session_token);",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains session_token\"] = responseBody.has(\"session_token\")",
									"tests[\"Session Token is valid\"] = Object.prototype.toString.call(jsonData.session_token) === \"[object String]\";"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "glpi",
								"password": "glpi",
								"saveHelperData": true,
								"showPassword": false
							}
						},
						"url": "{{base_url}}/initSession/",
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							},
							{
								"key": "Authorization",
								"value": "Basic Z2xwaTpnbHBp",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": "Request a session token to uses other api endpoints."
					},
					"response": []
				},
				{
					"name": "Delete users",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_id = postman.getEnvironmentVariable(\"user1_id\");",
									"var user2_id = postman.getEnvironmentVariable(\"user2_id\");",
									"var user3_id = postman.getEnvironmentVariable(\"user3_id\");",
									"var user4_id = postman.getEnvironmentVariable(\"user4_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\"); ",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"User 1 return true\"] = jsonData[0][user1_id];",
									"tests[\"User 2 return true\"] = jsonData[1][user2_id];",
									"tests[\"User 3 return true\"] = jsonData[2][user3_id];",
									"tests[\"User 4 return true\"] = jsonData[3][user4_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/User",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{user1_id}}\r\n    },\r\n\t{\r\n      \"id\": {{user2_id}}\r\n    },\r\n\t{\r\n      \"id\": {{user3_id}}\r\n    },\r\n\t{\r\n      \"id\": {{user4_id}}\r\n    }\r\n  ],\r\n  \"force_purge\": true\r\n}"
						},
						"description": "Delete an object existing in GLPi."
					},
					"response": []
				},
				{
					"name": "Delete entities",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"var user1_entity_id = postman.getEnvironmentVariable(\"user1_entity_id\");",
									"var user2_entity_id = postman.getEnvironmentVariable(\"user2_entity_id\");",
									"var user3_entity_id = postman.getEnvironmentVariable(\"user3_entity_id\");",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Status code name has string\"] = responseCode.name.has(\"OK\");",
									"tests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
									"tests[\"Body contains array\"] = Array.isArray(jsonData);",
									"tests[\"Body contains message\"] = responseBody.has(\"message\");",
									"tests[\"Entity 1 return true\"] = jsonData[0][user1_entity_id];",
									"tests[\"Entity 2 return true\"] = jsonData[1][user2_entity_id];",
									"tests[\"Entity 3 return true\"] = jsonData[2][user3_entity_id];"
								]
							}
						}
					],
					"request": {
						"url": "{{base_url}}/Entity",
						"method": "DELETE",
						"header": [
							{
								"key": "Session-Token",
								"value": "{{session_token}}",
								"description": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"input\": [\r\n    {\r\n      \"id\": {{user1_entity_id}}\r\n    },\r\n    {\r\n      \"id\": {{user2_entity_id}}\r\n    },\r\n    {\r\n      \"id\": {{user3_entity_id}}\r\n    }\r\n  ]\r\n}"
						},
						"description": "Delete many objects existing in GLPi."
					},
					"response": []
				}
			]
		}
	]
}